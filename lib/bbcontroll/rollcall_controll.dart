// ignore_for_file: use_build_context_synchronously

import 'dart:convert';

import 'package:badminton_management_1/app_local.dart';
import 'package:badminton_management_1/bbcontroll/connection/check_connection.dart';
import 'package:badminton_management_1/bbcontroll/state/list_student_provider.dart';
import 'package:badminton_management_1/bbcontroll/template/message_template.dart';
import 'package:badminton_management_1/bbdata/aamodel/my_facility.dart';
import 'package:badminton_management_1/bbdata/aamodel/my_student.dart';
import 'package:badminton_management_1/bbdata/aamodel/my_user.dart';
import 'package:badminton_management_1/bbdata/online/facility_api.dart';
import 'package:badminton_management_1/bbdata/online/roll_call_api.dart';
import 'package:badminton_management_1/bbdata/online/roll_call_coachs_api.dart';
import 'package:badminton_management_1/ccui/ccresource/app_message.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart' show rootBundle;
import 'package:geolocator/geolocator.dart';
import 'package:googleapis_auth/auth_io.dart';
import 'package:http/http.dart' as http;
import 'package:provider/provider.dart';
import 'package:quickalert/quickalert.dart';

class RollCallControll {
  final RollCallCoachesApi rollCallCoachesApi = RollCallCoachesApi();
  final FacilityApi facilityApi = FacilityApi();
  final RollCallApi rollCallApi = RollCallApi();
  // final RollCallDatabaseRepository rollcallRepository = RollCallDatabaseRepository();
  final MessageHandler messageHandler = MessageHandler();
  final ConnectionService connectionService = ConnectionService();
  final currentFacility = MyCurrentFacility();
  final listFacility = MyListCurrentFacility();
  final currentUser = MyCurrentUser();

  // Student Roll Call --------------------------------------------------------

Future<void> handleSaveListRollCall(BuildContext context) async {
  try {
    bool isConnect = await connectionService.checkConnect();
    await _processRollCallSave(context, isOnline: isConnect);
  } catch (e) {
    AppMessage.errorMessage(
        context, AppLocalizations.of(context).translate("error_data"));
  }
}

// ‚úÖ X·ª≠ l√Ω ƒëi·ªÉm danh v√† g·ª≠i th√¥ng b√°o
Future<void> _processRollCallSave(BuildContext context, {required bool isOnline}) async {
  final studentProvider = Provider.of<ListStudentProvider>(context, listen: false);

  bool? youSure = await _showConfirmationDialog(
    context,
    title: isOnline
        ? AppLocalizations.of(context).translate("rollcall_check_save")
        : AppLocalizations.of(context).translate("rollcall_check_save_local"),
  );

  if (youSure != true) return;

  QuickAlert.show(context: context, type: QuickAlertType.loading, disableBackBtn: true);

  Map<String, String> checkedStudents = {}; // id -> "1" (ƒêi h·ªçc) ho·∫∑c "0" (Kh√¥ng ƒëi h·ªçc)
  bool isAllSuccessful = true;

  List<MyStudent> studentsToCheck = List<MyStudent>.from(studentProvider.lstUpdateIsCheck);

  // ‚úÖ Duy·ªát qua t·∫•t c·∫£ h·ªçc vi√™n c·∫ßn c·∫≠p nh·∫≠t
  for (var std in studentsToCheck) { 
    String status = std.isCheck ?? "0"; // M·∫∑c ƒë·ªãnh l√† "0" n·∫øu null (coi nh∆∞ kh√¥ng ƒëi h·ªçc)

    bool isSaved = await _saveRollCallWithRetry(std, retryLimit: 3, isOnline: isOnline);

    if (!isSaved) {
      isAllSuccessful = false;
    } else {
      int index = studentProvider.lstUpdateIsCheck.indexWhere((student) => student.id == std.id);
      studentProvider.deleteFromLstUpdate(index);
      studentProvider.updateSavedRollCall(std);

      checkedStudents[std.id!] = status; // ‚úÖ ƒê·∫£m b·∫£o danh s√°ch ƒë√∫ng ƒë·ªãnh d·∫°ng ID -> Tr·∫°ng th√°i
    }
  }

  Navigator.pop(context);

  await messageHandler.handleAction(
      context,
      () async => isAllSuccessful,
      AppLocalizations.of(context).translate("success_save"),
      AppLocalizations.of(context).translate("error_retry_failed"));

  // üî• G·ª≠i th√¥ng b√°o sau khi l∆∞u ƒëi·ªÉm danh
  if (checkedStudents.isNotEmpty) {
    await _sendNotificationToCheckedStudents(checkedStudents);
  }
}



// ‚úÖ G·ª≠i th√¥ng b√°o cho h·ªçc vi√™n c√≥ token h·ª£p l·ªá t·ª´ Firestore
Future<void> _sendNotificationToCheckedStudents(Map<String, String> checkedStudents) async {
  try {
    QuerySnapshot<Map<String, dynamic>> studentsSnapshot = await FirebaseFirestore.instance
    .collection('users')
    .where("studentID", whereIn: checkedStudents.keys.map((e) => e.toString()).toList()) 
    .get();

        print("üì¢ Danh s√°ch ID c·∫ßn t√¨m: ${checkedStudents.keys.toList()}");
print("üì¢ S·ªë l∆∞·ª£ng document l·∫•y v·ªÅ: ${studentsSnapshot.docs.length}");

    Map<String, String> studentTokens = {};
    Map<String, String> studentIdMap = {}; 
   for (var doc in studentsSnapshot.docs) {
      String? fcmToken = doc['fcm_token'];
      String? studentID = doc['studentID']; // üî• L·∫•y studentID ƒë√∫ng
      if (studentID != null && fcmToken != null && fcmToken.trim().isNotEmpty) {
        studentTokens[doc.id] = fcmToken;
        studentIdMap[doc.id] = studentID.toString(); // üî• L∆∞u document ID -> student ID
      }
    }


    // ‚úÖ G·ª≠i th√¥ng b√°o n·∫øu c√≥ token h·ª£p l·ªá
    if (studentTokens.isNotEmpty) {
      for (var entry in studentTokens.entries) {
        String docId = entry.key; // Firestore Document ID
        String token = entry.value;
        String studentId = studentIdMap[docId] ?? "0"; // L·∫•y student ID ƒë√∫ng
        String status = checkedStudents[studentId] ?? "0"; // L·∫•y tr·∫°ng th√°i ƒëi·ªÉm danh

        String statusMessage = status == "1" ? "B·∫°n ƒë√£ ƒëi h·ªçc" : "B·∫°n ƒë√£ v·∫Øng m·∫∑t";

        print("üì¢ G·ª≠i th√¥ng b√°o cho $studentId ($docId) - Tr·∫°ng th√°i: $statusMessage");

        await sendPushNotification([token], "Th√¥ng b√°o ƒëi·ªÉm danh", statusMessage);
      }
    } else {
      print("‚ö†Ô∏è Kh√¥ng c√≥ token h·ª£p l·ªá ƒë·ªÉ g·ª≠i th√¥ng b√°o.");
    }
  } catch (e) {
    print("‚ùå L·ªói khi l·∫•y token t·ª´ Firestore ho·∫∑c g·ª≠i th√¥ng b√°o: $e");
  }
}


// ‚úÖ Hi·ªÉn th·ªã h·ªôp tho·∫°i x√°c nh·∫≠n
Future<bool?> _showConfirmationDialog(BuildContext context, {required String title}) async {
  return await QuickAlert.show(
    context: context,
    type: QuickAlertType.warning,
    title: title,
    showCancelBtn: true,
    onConfirmBtnTap: () => Future.microtask(() => Navigator.of(context).pop(true)),
    onCancelBtnTap: () => Future.microtask(() => Navigator.of(context).pop(false)),
  );
}

// ‚úÖ L∆∞u ƒëi·ªÉm danh qua API v·ªõi c∆° ch·∫ø retry
Future<bool> _saveRollCallWithRetry(MyStudent std, {required int retryLimit, required bool isOnline}) async {
  int retryCount = 0;
  bool isSaved = false;

  while (!isSaved && retryCount < retryLimit) {
      if (isOnline) {
        isSaved = await rollCallApi.rollCall(std.id!, std.isCheck ?? "1");
      }
      if (!isSaved) {
        retryCount++;
      }
      await Future.delayed(const Duration(seconds: 1));
    }

  return isSaved;
}



Future<void> sendPushNotification(List<String> tokens, String title, String body) async {
  if (tokens.isEmpty) {
    print("‚ùå Kh√¥ng c√≥ token h·ª£p l·ªá ƒë·ªÉ g·ª≠i th√¥ng b√°o.");
    return;
  }

  const String projectId = "davidbadminton";
  final String accessToken = await getAccessToken();

  final Uri fcmUrl = Uri.parse("https://fcm.googleapis.com/v1/projects/$projectId/messages:send");

  for (String token in tokens) {
    try {
      final response = await http.post(
        fcmUrl,
        headers: {
          "Content-Type": "application/json",
          "Authorization": "Bearer $accessToken"
        },
        body: jsonEncode({
          "message": {
            "token": token,
            "notification": {
              "title": title,
              "body": body
            },
            "android": {
              "priority": "high"
            },
            "apns": {
              "payload": {
                "aps": {
                  "sound": "default"
                }
              }
            }
          }
        }),
      );

      if (response.statusCode == 200) {
        print("‚úÖ G·ª≠i th√†nh c√¥ng ƒë·∫øn $token");
      } else {
        print("‚ùå L·ªói g·ª≠i FCM ƒë·∫øn $token: ${response.body}");
      }
    } catch (e) {
      print("‚ùå L·ªói khi g·ª≠i FCM: $e");
    }
  }
}


Future<String> getAccessToken() async {
  final serviceAccount = jsonDecode(await rootBundle.loadString('assets/service-account.json'));

  final client = await clientViaServiceAccount(
    ServiceAccountCredentials.fromJson(serviceAccount),
    ['https://www.googleapis.com/auth/firebase.messaging'],
  );

  return client.credentials.accessToken.data;
}


  Future<Position> _determinePosition() async {
    bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
    if (!serviceEnabled) throw Exception("D·ªãch v·ª• v·ªã tr√≠ b·ªã t·∫Øt.");

    LocationPermission permission = await Geolocator.checkPermission();
    if (permission == LocationPermission.denied) {
      permission = await Geolocator.requestPermission();
      if (permission == LocationPermission.denied) {
        throw Exception("Quy·ªÅn v·ªã tr√≠ b·ªã t·ª´ ch·ªëi.");
      }
    }
    if (permission == LocationPermission.deniedForever) {
      throw Exception("Quy·ªÅn v·ªã tr√≠ b·ªã t·ª´ ch·ªëi vƒ©nh vi·ªÖn.");
    }

    Position position = await Geolocator.getCurrentPosition();
    print(
        "üìç V·ªã tr√≠ hi·ªán t·∫°i: Lat: ${position.latitude}, Lng: ${position.longitude}");
    return position;
  }

  Future<Map<String, dynamic>> _fetchWeatherData() async {
    try {
      Position position = await _determinePosition();
      print(
          "üåç L·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt t·∫°i: ${position.latitude}, ${position.longitude}");

      String apiKey = "62c8370f658f2457db00ee12eaa5b07d"; // API Key c·ªßa b·∫°n
      String url =
          "https://api.openweathermap.org/data/2.5/weather?lat=${position.latitude}&lon=${position.longitude}&appid=$apiKey&units=metric&lang=vi";
      print("üîó API URL: $url"); // Ki·ªÉm tra URL API

      final response = await http.get(Uri.parse(url));

      if (response.statusCode == 200) {
        var data = jsonDecode(response.body);
        print("‚úÖ D·ªØ li·ªáu th·ªùi ti·∫øt: $data");
        return {
          "city": data["name"],
          "description": data["weather"][0]["description"],
          "temperature": data["main"]["temp"],
          "icon": data["weather"][0]["icon"],
        };
      } else {
        throw Exception("L·ªói khi t·∫£i d·ªØ li·ªáu th·ªùi ti·∫øt.");
      }
    } catch (e) {
      print("‚ùå L·ªói l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt: $e");
      return {};
    }
  }

  Future<bool> isNearFacility(BuildContext context) async {
    try {
      const double proximityThreshold = 50; // 1km
      await listFacility.setList();
      List<MyFacility> lstFacility = listFacility.lstFacility!;
      List<MyFacility> nearbyFacility = [];

      print(
          "üìç V·ªã tr√≠ hi·ªán t·∫°i: ${currentUser.latitude}, ${currentUser.longitude}");
      print("üè¢ Danh s√°ch c∆° s·ªü c√≥ trong h·ªá th·ªëng:");

      for (var facility in lstFacility) {
        double distance = Geolocator.distanceBetween(
          currentUser.latitude ?? 0.0, // Tr√°nh l·ªói n·∫øu gi√° tr·ªã null
          currentUser.longitude ?? 0.0,
          facility.latitude ?? 0.0,
          facility.longtitude ?? 0.0,
        );

        print("üè¢ C∆° s·ªü: ${facility.name}");
        print("üìç V·ªã tr√≠ c∆° s·ªü: ${facility.latitude}, ${facility.longtitude}");
        print("üìè Kho·∫£ng c√°ch: $distance m√©t");

        if (distance <= proximityThreshold) {
          nearbyFacility.add(facility);
        }
      }

      if (nearbyFacility.isNotEmpty) {
        currentFacility.setCurrent(nearbyFacility.first);
        print("‚úÖ T√¨m th·∫•y c∆° s·ªü g·∫ßn nh·∫•t: ${nearbyFacility.first.name}");
      } else {
        print("‚ùå Kh√¥ng c√≥ c∆° s·ªü n√†o trong ph·∫°m vi $proximityThreshold m√©t.");
      }

      return nearbyFacility.isNotEmpty;
    } catch (e) {
      print("‚ùå L·ªói trong qu√° tr√¨nh ki·ªÉm tra kho·∫£ng c√°ch: $e");
      return false;
    }
  }

  Future<void> rollCallCoachs(BuildContext context) async {
    await listFacility.setList();
    List<MyFacility> lstFacility = listFacility.lstFacility!;

    print("üìå Danh s√°ch c∆° s·ªü t·ª´ database:");
    for (var facility in lstFacility) {
      print(
          "üè¢ C∆° s·ªü: ${facility.name}, T·ªça ƒë·ªô: ${facility.latitude}, ${facility.longtitude}");
    }

    if (lstFacility.isEmpty) {
      print("‚ö†Ô∏è L·ªói: Kh√¥ng c√≥ c∆° s·ªü n√†o ƒë∆∞·ª£c t·∫£i t·ª´ database!");
    }
    try {
      await getCurrentPosition();
      bool isAtWork = await isNearFacility(context);

      print("üõ† Ki·ªÉm tra v·ªã tr√≠ ch·∫•m c√¥ng: $isAtWork");

      if (isAtWork) {
        print("‚úÖ B·∫°n ƒëang ·ªü trong khu v·ª±c ch·∫•m c√¥ng.");

        await messageHandler.handleAction(context, () async {
          await rollCallCoachesApi.rollCallCoachs(context);
          return true;
        }, "rollcall_success", "error_rollcall");
      } else {
        print("‚ùå B·∫°n kh√¥ng ·ªü trong khu v·ª±c ch·∫•m c√¥ng!");
        AppMessage.errorMessage(
            context, "B·∫°n ch∆∞a ·ªü ƒë√∫ng v·ªã tr√≠ ƒë·ªÉ ch·∫•m c√¥ng.");
      }
    } catch (e) {
      print("‚ùå L·ªói trong qu√° tr√¨nh ch·∫•m c√¥ng: $e");
      AppMessage.errorMessage(context, "L·ªói ch·∫•m c√¥ng. Vui l√≤ng th·ª≠ l·∫°i.");
    }
  }

  Future<void> getCurrentPosition() async {
    try {
      Position position = await Geolocator.getCurrentPosition(
          desiredAccuracy: LocationAccuracy.high);

      currentUser.latitude = position.latitude; // L∆∞u d∆∞·ªõi d·∫°ng double
      currentUser.longitude = position.longitude;
      print(
          "üìå T·ªça ƒë·ªô hi·ªán t·∫°i c·∫≠p nh·∫≠t: ${currentUser.latitude}, ${currentUser.longitude}");
    } catch (e) {
      print("‚ùå L·ªói khi l·∫•y v·ªã tr√≠: $e");
    }
  }

  Future<void> handleAction(
      BuildContext context,
      Future<bool> Function(BuildContext) action, // H√†m c√≥ tham s·ªë `context`
      String successMessage,
      String errorMessage) async {
    try {
      bool result = await action(context); // G·ªçi h√†m v·ªõi `context`
      if (result) {
        QuickAlert.show(
          context: context,
          type: QuickAlertType.success,
          title: successMessage,
        );
      } else {
        QuickAlert.show(
          context: context,
          type: QuickAlertType.error,
          title: errorMessage,
        );
      }
    } catch (e) {
      QuickAlert.show(
        context: context,
        type: QuickAlertType.error,
        title: errorMessage,
      );
    }
  }
}
